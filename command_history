quit
untick-eval
trans $`(a b c)$
end-trans
untick-eval
trans $`(a b c)$
back-hist
untick-eval
trans $`(a b c)$
quit
!
run-script "./Improvement scripts/exec-all"
exit-script
show-active-script
prev-cmd
show-active-script
run-script "./Improvement scripts/exec-all"
quit
show-active-script
run-script "./Improvement scripts/exec-all"
quit
show-active-script
run-script "./Improvement scripts/exec-all"
quit
run-script "./Improvement scripts/exec-all"
quit
exit
run-script "./Improvement scripts/exec-all"
!
run-script "./Improvement scripts/exec-all"
quit
unapply-def 'Revbody
top
eval-wce
right
append-assoc-lr-wce
rhs
next
up
eval-wce
right ; rhs
case-eval
add-lib EVAL $[-] ++ LIST$
case-eval
up ; up 
beta
bets
right
right  ; left
apply-def 'Revbody
top
up ; beta
beta
left
right
apply-def 'Abs ; apply-def 'Rep
trans $V_Abs[V_Rep[V_Revbody[f]]]$ WCE $V_Revbody[f]$
show-lib defs
import-lib ./libs/reverse
quit
show-lib defs
run-script "./Improvement scripts/reverse_cond_2"
quit
untick-intro
tick-elim
trans $``x$ IMP $x$
quit
trans $x$ I $y$
trans $x$ IMP $y$
end-trans
trans $x$
trans $``x$ I $x$
trans $``x$ imp $x$
trans $``x$ I $x$
trans $``x$ IMP $x$
tranks $``x$ IMP $x$
quit
untick-intro
tick-elim
trans $``x$ I $x$
end-trans
end-tran
untick-eval $[-] _ _$
back-hist
untick-eval $[-] b c$
trans $`(a b c)$
exit-script
end-trans
highlight ON
highlight on
run-script "./Improvement Scripts/exec-all"
quit
:q
quit
:q
q
show-lib
end-trans
exit-script
0
