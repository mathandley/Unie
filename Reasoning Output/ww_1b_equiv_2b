
Here we prove that worker/wrapper 1-beta and 2-beta are equivalent under
assumption C.
For this, we have encoded assumption C as an improvement rule
in our standard library as unww-ass-c.

UNIE script found in: /Improvement Scripts/ww_1b_equiv_2b

----------------------------------------------------------------------------------------------------
Transformation info: -----
----------------------------------------------------------------------------------------------------
-- Goal: -----------------
let x = V_Rep[V_F[V_Abs[x]]] in x
-- Global relation: ------
⪅⪆
-- Steps: ---------------
13
-- Navigation steps: ----
6
----------------------------------------------------------------------------------------------------
Transformation history: --
----------------------------------------------------------------------------------------------------
    { trans $ let x = V_F[x] in V_Rep[x] $ WCE $ let x = V_Rep[V_F[V_Abs[x]]] in x $ }

let x = V_F[x] in V_Rep[x]

 ≲≳ { value-beta 'x $ let x = V_F[x] in V_Rep[-] $ }

let x = V_F[x] in V_Rep[✔V_F[x]]

  ≡ { right }

let x = V_F[x] in V_Rep[✔V_F[x]]

  ≡ { right }

let x = V_F[x] in V_Rep[✔V_F[x]]

 ⪅⪆ { untick-intro }

let x = V_F[x] in V_Rep[V_F[x]]

  ≡ { top }

let x = V_F[x] in V_Rep[V_F[x]]

 ≲≳ { unlet-float-val $ V_Rep[V_F[-]] $ }

V_Rep[V_F[let x = V_F[x] in x]]

  ≡ { right }

V_Rep[V_F[let x = V_F[x] in x]]

  ≡ { right }

V_Rep[V_F[let x = V_F[x] in x]]

 ⪅⪆ { unww-ass-c $ V_Abs[-] $ $ V_Rep[-] $ $ V_F[-] $ }

V_Rep[V_F[let x = V_Abs[V_Rep[V_F[x]]] in x]]

  ≡ { top }

V_Rep[V_F[let x = V_Abs[V_Rep[V_F[x]]] in x]]

 ≲≳ { let-float-val $ V_Rep[V_F[-]] $ }

let x = V_Abs[V_Rep[V_F[x]]] in V_Rep[V_F[x]]

 ⪅⪆ { rolling-rule $ V_Abs[-] $ $ V_Rep[V_F[-]] $ }

let x = V_Rep[V_F[V_Abs[x]]] in x



----------------------------------------------------------------------------------------------------
-- Generated by UNIE on: 18-10-2017 ----------------------------------------------------------------
