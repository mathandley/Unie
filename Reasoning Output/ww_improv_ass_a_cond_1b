
Here we prove that worker/wrapper assumption C together with worker/wrapper 
condition 1-beta implies the improvement.

That is: let x = G[x] in Abs[x] improves let x = F[x] in x.

In particular, this script shows UNIE's use of assumptions, using
the 'ass' command.

UNIE script found in: /Improvement Scripts/ww_improv_ass_a_cond_1b

----------------------------------------------------------------------------------------------------
Transformation info: -----
----------------------------------------------------------------------------------------------------
-- Goal: -----------------
let x = V_G[x] in V_Abs[x]
-- Global relation: ------
⪆
-- Steps: ---------------
11
-- Navigation steps: ----
4
----------------------------------------------------------------------------------------------------
Transformation history: --
----------------------------------------------------------------------------------------------------
    { trans $ let x = V_F[x] in x $ WI $ let x = V_G[x] in V_Abs[x] $ }

let x = V_F[x] in x

 ⪅⪆ { unww-ass-c $ V_Abs[-] $ $ V_Rep[-] $ $ V_F[-] $ }

let x = V_Abs[V_Rep[V_F[x]]] in x

 ⪅⪆ { unrolling-rule $ V_Abs[-] $ $ V_Rep[V_F[-]] $ }

let x = V_Rep[V_F[V_Abs[x]]] in V_Abs[x]

 ≲≳ { let-float-val $ [-] $ }

let x = V_Rep[V_F[V_Abs[x]]] in V_Abs[x]

 ≲≳ { unlet-float-val $ V_Abs[-] $ }

V_Abs[let x = V_Rep[V_F[V_Abs[x]]] in x]

  ≡ { right }

V_Abs[let x = V_Rep[V_F[V_Abs[x]]] in x]

  ≡ { left }

V_Abs[let x = V_Rep[V_F[V_Abs[x]]] in x]

  ≡ { rhs }

V_Abs[let x = V_Rep[V_F[V_Abs[x]]] in x]

  ⪆ { ass WI $ V_G[x] $ }

V_Abs[let x = V_G[x] in x]

  ≡ { top }

V_Abs[let x = V_G[x] in x]

 ≲≳ { let-float-val $ V_Abs[-] $ }

let x = V_G[x] in V_Abs[x]



----------------------------------------------------------------------------------------------------
-- Generated by UNIE on: 18-10-2017 ----------------------------------------------------------------
